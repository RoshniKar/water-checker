# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JYV1npoQ__hfiU0a8veeyLaKo_g8JAK7
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import json
import math

app = FastAPI()

# Enable CORS for frontend access
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Update this for production
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load pincode→hardness map
with open("pincode_water_hardness.json", "r") as f:
    hardness_map = json.load(f)

# Load pincode→city map
with open("pincode_to_city.json", "r") as f:
    pincode_to_city = json.load(f)

# Create city→pincodes mapping (for fallback)
city_to_pincodes = {}
for pincode, city in pincode_to_city.items():
    if city not in city_to_pincodes:
        city_to_pincodes[city] = []
    city_to_pincodes[city].append(pincode)

# Create hardness list for percentile calculation
all_ppms = [v["ppm"] for v in hardness_map.values() if v["ppm"] is not None]
mu_final = sum(all_ppms) / len(all_ppms)
sigma = (sum((x - mu_final) ** 2 for x in all_ppms) / len(all_ppms)) ** 0.5

@app.get("/water-check")
def check_water(pincode: str):
    ppm = None
    city = None

    # 1. Try exact pincode
    if pincode in hardness_map:
        ppm = hardness_map[pincode]["ppm"]
        city = hardness_map[pincode]["city"]
    else:
        # 2. Try same city
        if pincode in pincode_to_city:
            fallback_city = pincode_to_city[pincode]
            for other_pin in city_to_pincodes.get(fallback_city, []):
                if other_pin in hardness_map:
                    ppm = hardness_map[other_pin]["ppm"]
                    city = fallback_city
                    break

        # 3. Try any other pincode as final fallback
        if ppm is None:
            for data in hardness_map.values():
                if data["ppm"]:
                    ppm = data["ppm"]
                    city = data["city"]
                    break

    if ppm is None:
        raise HTTPException(status_code=404, detail="No fallback available")

    # Calculate percentile (like HelloKlean)
    percentile = 100 / (1 + math.exp(-(ppm - mu_final) / sigma))

    return [{
        "city": city,
        "pincode": pincode,
        "wasserhaerte_avg": ppm,
        "Hardness-unit": "ppm",
        "mu_final": mu_final,
        "sigma": sigma,
        "h_ppm": ppm,
        "hardness_percentile": percentile
    }]